<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MinimumVisualStudioVersion>15.0</MinimumVisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectTypeGuids>{82b43b9b-a64c-4715-b499-d71e9ca2bd60};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectGuid>{4BBE7B39-E00A-40FE-88FC-A53C7E49731F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SonarLint.VisualStudio.AdditionalFiles</RootNamespace>
    <AssemblyName>SonarLint.VisualStudio.AdditionalFiles</AssemblyName>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <GeneratePkgDefFile>false</GeneratePkgDefFile>
    <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer>
    <IncludeDebugSymbolsInVSIXContainer>false</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>false</IncludeDebugSymbolsInLocalVSIXDeployment>
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
    <StartAction>Program</StartAction>
    <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
    <StartArguments>/rootsuffix Exp</StartArguments>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.VSSDK.BuildTools" Version="16.8.3038">
      <IncludeAssets>runtime; build; native; contentfiles; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <None Include="source.extension.vsixmanifest">
      <SubType>Designer</SubType>
    </None>
    <Content Include="ReadMe.txt" />
  </ItemGroup>
  <Import Project="..\EmbeddedSonarAnalyzer.props" />
  <!-- ********************************************************** -->
  <!-- SonarJS plugin handling -->
  <!-- Download and unpack the jar, select the required files and -->
  <!-- add them to the VSIX.                                      -->
  <!-- ********************************************************** -->
  <PropertyGroup>
    <!-- Download url for the SonarJS plugin. Update this url to embed a new version of the plugin. -->
    <PluginUrl>https://binaries.sonarsource.com/Distribution/sonar-javascript-plugin/sonar-javascript-plugin-$(EmbeddedSonarJSAnalyzerVersion).jar</PluginUrl>
    <TypeScriptFolderName>ts</TypeScriptFolderName>
    
    <!-- Folder the embedded files should be copied to. This folder should be excluded from source code control. -->
    <TypeScriptTargetDirectory>$(MSBuildThisFileDirectory)$(TypeScriptFolderName)</TypeScriptTargetDirectory>
    
    <!-- Hook the target that fetches the additional files into to the build process. 
         This needs to be set after the SDK targets have been imported.
    -->
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);GetTypeScriptFiles</PrepareForBuildDependsOn>
    <!-- By default the SDK targets only zip Release builds. We'll always zip since the file is very large otherwise. -->
    <ZipPackageCompressionLevel>Normal</ZipPackageCompressionLevel>
  </PropertyGroup>
  
  <ItemGroup Label="GetTypScriptFiles inputs and outputs">
    <!-- Specifies the target inputs and outputs so MSBuild can skip fetching the files if the analyzer version has not changed. -->
    <AdditionalFilesInput Include="..\EmbeddedSonarAnalyzer.props" />
    <AdditionalFilesOutput Include="$(OutputPath)$(AssemblyName).vsix" />
  </ItemGroup>
  
  <Target Name="GetTypeScriptFiles" Inputs="@(AdditionalFilesInput)" Outputs="@(AdditionalFilesOutput)" >
    <Message Importance="high" Text="Fetching the TypeScript files..." />
    <!-- Note: building the helper project explicitly using MSBuild rather than referencing it via a ProjectReference.
         This makes is easier for us to control when the build is performed, so we can trigger it early enough
         to include the downloaded files as normal Content files in this project.
         Also, we are using the "Exec" task to invoke MSBuild.exe rather the "MSBuild" task when building
         DownloadCFamilyPlugin.csproj to avoid getting file-locking errors when rebuilding.
    -->
	
	<!-- Workaround for a locking issue; the download project assembly might still be locked
	     by the Integration.Vsix project, if it hasn't finished running. However, the project has
         already been built it doesn't matter if we can't build it again here. We just need to running
         execute the "EmbedTypeScriptFiles" target afterwards.
         If there really is a problem with being unable to build the download assembly then the callout
         to EmbedTypeScriptFiles will fail anyway. -->
    <Message Importance="high" Text="Ensuring the download task project has been built..." />
	<Exec Command="&quot;$(MSBuildBinPath)\msbuild.exe&quot; ..\..\build\DownloadCFamilyPlugin\DownloadCFamilyPlugin.csproj /p:UseSharedCompilation=false /nodeReuse:false /t:Restore;Build" LogStandardErrorAsError="false" IgnoreExitCode="true" />

    <Message Importance="high" Text="Executing EmbedTypeScriptFiles target..." />
    <Exec Command="&quot;$(MSBuildBinPath)\msbuild.exe&quot; ..\..\build\DownloadCFamilyPlugin\DownloadCFamilyPlugin.csproj /p:PluginUrl=$(PluginUrl) /p:TargetDirectory=&quot;$(TypeScriptTargetDirectory)&quot; /p:UseSharedCompilation=false /nodeReuse:false /t:EmbedTypeScriptFiles" LogStandardErrorAsError="true" IgnoreExitCode="false" />
    <ItemGroup>
      <!-- Note (1): vsixutil.exe will fail with an OutOfMemory error if there are too many files in the VSIX (the size of the files
                     doesn't matter, it's the number that counts.
		     So, we are excluding some files that are not required i.e. the *.map files.
		     If we need to exclude more files then other candidates are:
		     * the localization files for the TypeScript compiler
		     * some modules include "test" folders which may not be needed
		     * *.d.ts files i.e. type definition files. Ones in modules other than the TypeScript compiler/eslint modules *might* not be needed
      -->
      <!-- Note (2): the file name has to be relative. The "Include" value is used to set the value of the "vsixSubPath" metadata item.
			If this is an absolute path the VSSDK tools won't complain, but the file won't be included in the vsix. -->
      <Content Include="$(TypeScriptFolderName)\**\*"
               Exclude="$(TypeScriptFolderName)\**\*.map" >
        <CopyToOutputDirectory>Never</CopyToOutputDirectory>
        <IncludeInVSIX>True</IncludeInVSIX>
        <Visible>false</Visible>
      </Content>
    </ItemGroup>
  </Target>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />
</Project>