<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyzerManager_InConnectedMode" xml:space="preserve">
    <value>Connected mode detected.</value>
    <comment>Output window message</comment>
  </data>
  <data name="AnalyzerManager_InStandaloneMode" xml:space="preserve">
    <value>Standalone mode detected.</value>
    <comment>Output window message</comment>
  </data>
  <data name="CannotFindToolWindow" xml:space="preserve">
    <value>Cannot find tool window with the specified guid: {0}</value>
    <comment>Exception message, {0} guid</comment>
  </data>
  <data name="Daemon_Downloaded" xml:space="preserve">
    <value>Finished downloading the daemon.</value>
  </data>
  <data name="Daemon_Downloading" xml:space="preserve">
    <value>Downloading the daemon...</value>
  </data>
  <data name="Daemon_Download_Url" xml:space="preserve">
    <value>Daemon download url: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_Editor_ERROR" xml:space="preserve">
    <value>Daemon error occurred in editor integration: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_InitializationComplete" xml:space="preserve">
    <value>Finished initializing the daemon package.</value>
  </data>
  <data name="Daemon_Initializing" xml:space="preserve">
    <value>Initializing the daemon package...</value>
  </data>
  <data name="Daemon_Installed" xml:space="preserve">
    <value>Finished installing the daemon.</value>
  </data>
  <data name="Daemon_Installing" xml:space="preserve">
    <value>Installing the daemon...</value>
  </data>
  <data name="Daemon_InvalidFileNameInDownloadEnvVar" xml:space="preserve">
    <value>The daemon file name supplied in {0} environment variable is invalid ('{1}'). Using the default download URL.</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_InvalidUrlInDownloadEnvVar" xml:space="preserve">
    <value>Download URL supplied in {0} environment variable is invalid ('{1}'). Using default download URL.</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_Started" xml:space="preserve">
    <value>Daemon started successfully.</value>
  </data>
  <data name="Daemon_Starting" xml:space="preserve">
    <value>Starting the daemon...</value>
  </data>
  <data name="Daemon_Stopped" xml:space="preserve">
    <value>Daemon stopped successfully.</value>
  </data>
  <data name="Daemon_Stopping" xml:space="preserve">
    <value>Stopping the daemon...</value>
  </data>
  <data name="Daemon_UsingDefaultDownloadLocation" xml:space="preserve">
    <value>Using default daemon download URL</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_UsingDownloadUrlFromEnvVar" xml:space="preserve">
    <value>Using daemon download url from {0} environment variable</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_Version" xml:space="preserve">
    <value>Daemon version: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="ERROR_ConfiguringDaemon" xml:space="preserve">
    <value>Error occurred configuring the daemon: {0}</value>
  </data>
  <data name="ERROR_InitializingDaemon" xml:space="preserve">
    <value>Error occurred initializing the daemon package: {0}</value>
    <comment>Error message in output window when an exception thrown during async daemon initialization</comment>
  </data>
  <data name="ERROR_InstallingDaemon" xml:space="preserve">
    <value>Error occurred installing the daemon: {0}</value>
  </data>
  <data name="InvalidInfoBarInstance" xml:space="preserve">
    <value>The specified argument is of a valid type.</value>
    <comment>Exception message</comment>
  </data>
  <data name="InvalidVisualStudioVersion" xml:space="preserve">
    <value>Invalid VisualStudio version, expecting '14.0' or '15.0' got '{0}'.</value>
    <comment>Error message in output window when the VisualStudio version is not the expected one. {0} Actual VisualStudio version</comment>
  </data>
  <data name="Notifications_Connected" xml:space="preserve">
    <value>Connected: checking for notifications</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_ERROR" xml:space="preserve">
    <value>Notifications: error occurred: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_InitializationComplete" xml:space="preserve">
    <value>Finished initializing the notifications package</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_Initializing" xml:space="preserve">
    <value>Initializing the notifications package...</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_LoadingSettings" xml:space="preserve">
    <value>Loading notifications settings...</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_NotConnected" xml:space="preserve">
    <value>Not connected: not checking for notifications</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_SavingSettings" xml:space="preserve">
    <value>Saving notifications settings...</value>
    <comment>Output window message</comment>
  </data>
  <data name="SL_ERROR" xml:space="preserve">
    <value>SonarLint package: error occurred: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="SL_InitializationComplete" xml:space="preserve">
    <value>Finishing initializing the SonarLint package</value>
    <comment>Output window message</comment>
  </data>
  <data name="SL_Initializing" xml:space="preserve">
    <value>Initializing the SonarLint package...</value>
    <comment>Output window message</comment>
  </data>
  <data name="Telemetry_ERROR" xml:space="preserve">
    <value>Telemetry: error occurred: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="Telemetry_InitializationComplete" xml:space="preserve">
    <value>Finished initializing the telemetry package...</value>
    <comment>Output window message</comment>
  </data>
  <data name="Telemetry_Initializing" xml:space="preserve">
    <value>Initializing the telemetry package...</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_Download_ErrorDlgTitle" xml:space="preserve">
    <value>SonarLint - download error</value>
    <comment>Title for modal error dialogue box</comment>
  </data>
  <data name="Daemon_Download_ErrorLogMessage" xml:space="preserve">
    <value>Download error:</value>
  </data>
  <data name="Daemon_PlatformToolsetNotSpecified" xml:space="preserve">
    <value>The file cannot be analyzed because the platform toolset has not been specified. Set the Platform Toolset property through the Visual Studio project property page.</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_NotStarting_NotEnabled" xml:space="preserve">
    <value>Not starting the daemon: support for additional languages is not activated.</value>
    <comment>Output window message</comment>
  </data>
  <data name="ERROR_StoppingDaemon" xml:space="preserve">
    <value>Error stopping the daemon: {0}</value>
    <comment>Output window message</comment>
  </data>
  <data name="Daemon_Downloading_StatusBarMessage" xml:space="preserve">
    <value>Downloading SonarLint daemon</value>
    <comment>VS status bar message</comment>
  </data>
  <data name="ToolsOptions_ExampleJson" xml:space="preserve">
    <value>{
  "sonarlint_product": "SonarLint Visual Studio",
  "sonarlint_version": "4.12.0.0",
  "ide_version": "16.0.29123.89",
  "days_since_installation": 1,
  "days_of_use": 2,
  "connected_mode_used": false,
  "connected_mode_sonarcloud": false,
  "install_time": "2019-08-05T10:03:25.923+00:00",
  "system_time": "2019-08-06T11:31:00.142+01:00",
  "analyses": [
    {
      "language": "cs"
    },
    {
      "language": "js"
    },
    {
      "language": "cpp"
    },
    {
      "language": "c"
    },
    {
      "language": "vbnet"
    }
  ]
}</value>
    <comment>Examples of JSON payload that is uploaded to SonarSource</comment>
  </data>
  <data name="JobRunner_CancellingJob" xml:space="preserve">
    <value>Cancelling the job "{0}" started at {1}</value>
    <comment>Output window message</comment>
  </data>
  <data name="JobRunner_FinishedJob" xml:space="preserve">
    <value>Finished job "{0}" started at {1}. Elapsed time: {2}ms</value>
    <comment>Output window message</comment>
  </data>
  <data name="JobRunner_StartingJob" xml:space="preserve">
    <value>Starting job: "{0}". Time: {1}</value>
    <comment>Output window message</comment>
  </data>
  <data name="JobRunner_ExecutionError" xml:space="preserve">
    <value>Error running job "{0}" started at {1}. Error message: {2}</value>
    <comment>Output window message</comment>
  </data>
  <data name="JobRunner_JobDescription_ReaanalyzeOpenDocs" xml:space="preserve">
    <value>re-analyze open documents</value>
    <comment>Output window message</comment>
  </data>
</root>