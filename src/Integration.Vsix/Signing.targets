<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Targets to handle signing one or more VSIXes using a pfx certificate.
    
       Usage:
       The following properties should be set by the caller:
       * $(pfxCertificatePath)  : full path to the pfx file
       * $(pfxPassword)         : password to the certificate file
       * $(pfxSha1)             : the sha1 for the certificate file
       * @(VSIXesToSign)        : the list of VSIXes to sign
       * @(AssembliesToSign)    : the list of assemblies to sign
       * $(PackagesFolder)      : the folder containing the packages. Defaults to $(NuGetPackageRoot) if not set.
  -->

  <ItemGroup>
    <PackageReference Include="Microsoft.VSSDK.Vsixsigntool" Version="15.0.26201" />
  </ItemGroup>

  <Target Name="SignVsixesIfPfxSupplied">
    <Message Condition=" $(pfxCertificatePath) == '' " Importance="high" Text="Skipping signing VSIXes - pfx certificate path has not been set." />
    <CallTarget Condition=" $(pfxCertificatePath) != '' " Targets="LocateVsixSignToolAndBinaries;SignVsixes" />
  </Target>

  <!-- The vsixsigntool is shipped in a NuGet package. We need to locate the exe file. -->
  <Target Name="LocateVsixSignToolAndBinaries" >
    <PropertyGroup>
      <PackagesFolder Condition=" $(PackagesFolder) == ''">$(NuGetPackageRoot)</PackagesFolder>
    </PropertyGroup>

    <Message Importance="high" Text="Locating VSIX sign tool..." />
    <Message Importance="high" Text="  Searching under '$(PackagesFolder)'" />

    <!-- There could be multiple versions of the NuGet package on the machine. We'll select all
	       of the matching exes, and then just pick one. -->
    <ItemGroup>
	    <VsixSignToolsList Include="$(PackagesFolder)/Microsoft.VSSDK.Vsixsigntool/**/vsixsigntool.exe" />
	  </ItemGroup>
    <PropertyGroup>
      <VsixSignToolPath>%(VsixSignToolsList.Identity)</VsixSignToolPath>	
	  </PropertyGroup>

    <Error Condition=" $(VsixSignToolPath) == '' " Text="Unable to locate vsixsigntool.exe. Check that the Microsoft.VSSDK.Vsixsigntool NuGet package is installed." />
    <Message Importance="high" Text="VSIX signing tool located at $(VsixSignToolPath)" />
  </Target>

  <Target Name="SignVsixes">
    <Message Importance="high" Text="Vsix to sign: %(VSIXesToSign.FullPath)" />
    <CallTarget Targets="ValidateCommonSigningInputs" />
    <Error Condition="@(VSIXesToSign) == '' " Text="The list of VSIXes to sign is empty." />
    
    <!-- For info on timestamping see https://knowledge.digicert.com/generalinformation/INFO190.html -->
    <Exec Command="$(VsixSignToolPath) sign /f &quot;$(pfxCertificatePath)&quot; /p $(pfxPassword) /sha1 $(pfxSha1) /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp /v &quot;%(VSIXesToSign.Identity)&quot;" />
  </Target>

  <Target Name="SignAssembliesIfPfxSupplied">
    <Message Condition=" $(pfxCertificatePath) == '' " Importance="high" Text="Skipping signing assemblies - pfx certificate path has not been set." />
    <CallTarget Condition=" $(pfxCertificatePath) != '' " Targets="SignAssemblies" />
  </Target>

  <Target Name="SignAssemblies">
    <Message Importance="high" Text="Assembly to sign: %(AssembliesToSign.FullPath)" />
    <CallTarget Targets="ValidateCommonSigningInputs" />
    <Error Condition=" @(AssembliesToSign) == '' " Text="The list of assemblies to sign is empty." />
    <Error Condition=" $(SIGNTOOL_PATH) == '' " Text="The location of the signtool.exe has not been set ('SIGNTOOL_PATH')" />
    <Error Condition=" !Exists($(SIGNTOOL_PATH)) " Text="Signing tool exe does not exist at the specified location: $(SIGNTOOL_PATH)" />

    <Exec Command="&quot;$(SIGNTOOL_PATH)&quot; sign /debug /fd SHA256 /sha1 $(pfxSha1) /f &quot;$(pfxCertificatePath)&quot; /p $(pfxPassword) /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp &quot;%(AssembliesToSign.FullPath)&quot;" />
  </Target>

  <Target Name="ValidateCommonSigningInputs">
    <Error Condition=" $(pfxCertificatePath) == '' " Text="pfxCertificatePath has not been set" />
    <Error Condition=" $(pfxPassword) == '' " Text="pfxPassword has not been set" />
    <Error Condition=" $(pfxSha1) == '' " Text="pfxSha1 has not been set" />
    <Error Condition=" !Exists($(pfxCertificatePath)) " Text="The specified pfx file does not exist: $(pfxCertificatePath)" />
  </Target>

</Project>