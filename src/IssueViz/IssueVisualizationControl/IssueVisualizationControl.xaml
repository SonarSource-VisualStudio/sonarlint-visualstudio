<UserControl x:Class="SonarLint.VisualStudio.IssueVisualization.IssueVisualizationControl.IssueVisualizationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vsShell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:vsImaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:vsCatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:vsTheming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:vsUtilities="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
             xmlns:visualization="clr-namespace:SonarLint.VisualStudio.IssueVisualization.IssueVisualizationControl"
             xmlns:viewModels="clr-namespace:SonarLint.VisualStudio.IssueVisualization.IssueVisualizationControl.ViewModels"
             xmlns:core="clr-namespace:SonarLint.VisualStudio.Core.WPF;assembly=SonarLint.VisualStudio.Core"
             DataContext="{Binding ViewModel, RelativeSource={RelativeSource Mode=Self}}" x:ClassModifier="internal">
    <UserControl.Resources>
        <vsUtilities:BrushToColorConverter x:Key="BrushToColorConverter"/>
        <core:BoolToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible" />
        <visualization:SeverityToMonikerConverter x:Key="SeverityToMonikerConverter" />

        <!-- Base styles -->

        <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Setter Property="TextTrimming" Value="None"/>
            <Setter Property="LineStackingStrategy" Value="MaxHeight"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}"/>
            <Setter Property="FontSize" Value="{DynamicResource {x:Static vsShell:VsFonts.EnvironmentFontSizeKey}}"/>
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static vsShell:VsFonts.EnvironmentFontFamilyKey}}"/>
        </Style>

        <Style x:Key="BaseTitleTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
            <Setter Property="FontSize" Value="{DynamicResource {x:Static vsShell:VsFonts.CaptionFontSizeKey}}"/>
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static vsShell:VsFonts.CaptionFontFamilyKey}}"/>
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static vsShell:VsFonts.EnvironmentBoldFontWeightKey}}"/>
        </Style>

        <Style x:Key="BaseNumberInShapeTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static vsShell:VsFonts.EnvironmentBoldFontWeightKey}}"/>
        </Style>

        <Style x:Key="BaseShapeStyle" TargetType="Shape">
            <Setter Property="Fill" Value="{DynamicResource {x:Static vsShell:VsBrushes.ComboBoxBackgroundKey}}"/>
            <Setter Property="Stroke" Value="{DynamicResource {x:Static vsShell:VsBrushes.ComboBoxBorderKey}}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                    <Setter Property="Stroke" Value="{DynamicResource {x:Static vsShell:VsBrushes.StartPageButtonPinHoverKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                    <Setter Property="Stroke" Value="{DynamicResource {x:Static vsShell:VsBrushes.StartPageButtonPinHoverKey}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BaseListViewStyle" TargetType="ListView">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="SelectionMode" Value="Single"/>
        </Style>

        <!-- Overlay and Data grid styles -->

        <Style x:Key="OverlayTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTitleTextBlockStyle}">
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.InactiveCaptionTextKey}}" />
        </Style>

        <Style x:Key="OverlayGridStyle" TargetType="Grid">
            <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUIBackgroundKey}}" />
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentIssue, TargetNullValue=1}" Value="1">
                    <Setter Property="Grid.Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="DataFlowGridStyle" TargetType="Grid">
            <Setter Property="Visibility" Value="Visible" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentIssue, TargetNullValue=1}" Value="1">
                    <Setter Property="Grid.Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Data grid items styles -->

        <Style x:Key="IssueDescriptionDockPanelStyle" TargetType="DockPanel">
            <Setter Property="Margin" Value="5"/>
        </Style>

        <Style x:Key="StepNumberRectangleStyle" TargetType="Rectangle" BasedOn="{StaticResource BaseShapeStyle}">
            <Setter Property="RadiusX" Value="1"/>
            <Setter Property="RadiusY" Value="1"/>
            <Setter Property="StrokeThickness" Value="1"/>
        </Style>

        <Style x:Key="LocationsListViewItemStyle" TargetType="ListViewItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" 
                                Background="{TemplateBinding Background}" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger x:Name="FileNameListItemStyleTrigger" Binding="{Binding Path=Location}" Value="{x:Null}">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="IsSelected" Value="False"/>
                </DataTrigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarHoverOverSelectedKey}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarHoverOverSelectedIconBorderKey}}" />
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.StartPageSelectedItemBackgroundKey}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsShell:VsBrushes.StartPageSelectedItemBackgroundKey}}" />
                </Trigger>
                <DataTrigger Binding="{Binding IsNavigable}" Value="False">
                    <Setter Property="IsSelected" Value="False"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="Focusable" Value="false"/>
                    <Setter Property="ToolTip" Value="Cannot navigate to step. The source code is different from the analyzed version"/>
                    <Setter Property="ToolTipService.IsEnabled" Value="true"/>
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Location List Item styles -->

        <Style x:Key="BaseLocationItemTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
            <Setter Property="Margin" Value="5,0,0,0"/>
            <Setter Property="Padding" Value="1"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsNavigable}" Value="False">
                    <Setter Property="FontStyle" Value="Italic" />
                    <Setter Property="FontWeight" Value="Regular" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarTextInactiveKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.StartPageSelectedItemStrokeKey}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FileNameLocationListItemTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTitleTextBlockStyle}">
            <Setter Property="Margin" Value="5,0,0,0"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="ToolTipService.IsEnabled" Value="true"/>
            <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
        </Style>
    </UserControl.Resources>
    <Grid UseLayoutRounding="True" 
          Background="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUIBackgroundKey}}"
          vsTheming:ImageThemingUtilities.ImageBackgroundColor="{Binding Background, RelativeSource={RelativeSource Self}, Converter={StaticResource BrushToColorConverter}}">
        <Grid x:Name="Overlay" Style="{StaticResource OverlayGridStyle}" Panel.ZIndex="1000">
            <TextBlock Style="{StaticResource OverlayTextStyle}" Text="Please select an issue from the Error List" />
        </Grid>

        <Grid x:Name="DataFlow" Style="{StaticResource DataFlowGridStyle}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Name="IssueDescriptionRow" Height="Auto" />
                <RowDefinition Name="LocationsListRow" Height="*" />
            </Grid.RowDefinitions>

            <DockPanel Name="IssueDescription" 
                       Grid.Row="0"
                       Style="{StaticResource IssueDescriptionDockPanelStyle}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <vsImaging:CrispImage Grid.Column="0" 
                                        Height="16" Width="16"
                                        Moniker="{Binding Severity, Converter={StaticResource SeverityToMonikerConverter}, Mode=OneWay}" 
                                        Margin="0,0,5,0"/>
                    <TextBlock Grid.Column="1" Style="{StaticResource BaseTextBlockStyle}">
                        <Run Text="{Binding Description, Mode=OneWay}"/>
                        <Hyperlink NavigateUri="{Binding RuleHelpLink}" 
                                   RequestNavigate="Hyperlink_OnRequestNavigate"
                                   ToolTip="{Binding RuleKey, StringFormat={}(Open description of rule {0}), Mode=OneWay}">
                            <Run Text="{Binding RuleKey, StringFormat={}({0}), Mode=OneWay}" />
                        </Hyperlink>
                    </TextBlock>
                </Grid>
            </DockPanel>

            <ListView Name="LocationsList" 
                      Grid.Row="1"
                      Style="{StaticResource BaseListViewStyle}"
                      ItemContainerStyle="{StaticResource LocationsListViewItemStyle}"
                      ItemsSource="{Binding LocationListItems}"
                      SelectedItem="{Binding CurrentLocationListItem, Mode=TwoWay}">
                <ListBox.Resources>
                    <DataTemplate DataType="{x:Type viewModels:FileNameLocationListItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Name="FileType" Width="Auto"/>
                                <ColumnDefinition Name="FileName" Width="*"/>
                            </Grid.ColumnDefinitions>
                            <vsImaging:CrispImage Grid.Column="0" 
                                            Height="16" Width="16"
                                            Moniker="{Binding Icon}"/>

                            <TextBlock Grid.Column="1" 
                                       Style="{StaticResource FileNameLocationListItemTextBlockStyle}" 
                                       ToolTip="{Binding FullPath}"
                                       Text="{Binding FileName}" />
                        </Grid>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type viewModels:LocationListItem}">
                        <Grid Margin="10,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Name="StepNumber" Width="Auto"/>
                                <ColumnDefinition Name="Description" Width="*"/>
                                <ColumnDefinition Name="NonNavigableWarningIcon" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Viewbox Grid.Column="0" Width="14" Height="14" Margin="5,0,0,0">
                                <Grid Width="16" Height="16">
                                    <Rectangle Style="{StaticResource StepNumberRectangleStyle}"/>
                                    <TextBlock Style="{StaticResource BaseNumberInShapeTextBlockStyle}" Text="{Binding Location.StepNumber}" />
                                </Grid>
                            </Viewbox>
                            <TextBlock Grid.Column="1" 
                                       Style="{StaticResource BaseLocationItemTextBlockStyle}" 
                                       Text="{Binding Location.Location.Message}"/>
                            <vsImaging:CrispImage Grid.Column="2"
                                                Height="16" Width="16"
                                                Moniker="{x:Static vsCatalog:KnownMonikers.DocumentWarning}" 
                                                Visibility="{Binding IsNavigable, Converter={StaticResource InvertedBooleanToVisibilityConverter}, Mode=OneWay}"/>
                        </Grid>
                    </DataTemplate>
                </ListBox.Resources>
            </ListView>
        </Grid>
    </Grid>
</UserControl>
