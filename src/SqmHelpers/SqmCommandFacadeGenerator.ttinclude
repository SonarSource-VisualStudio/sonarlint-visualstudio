<# //************************************************************************************************* #>
<# //----------------------------------------------------------------------- #>
<# // <copyright file="SqmCommandFacadeGenerator.ttinclude" company="SonarSource SA and Microsoft Corporation"> #>
<# //   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved. #>
<# //   Licensed under the MIT License. See License.txt in the project root for license information. #>
<# // </copyright> #>
<# //----------------------------------------------------------------------- #>
<# //************************************************************************************************* #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<# string enumName = FeatureName + "SqmCommandIds"; #>
// <auto-generated>                                                          
// This code was generated using text template tool.                         
//                                                                           
// Changes to this file may cause incorrect behavior and will be lost if     
// the code is regenerated.                                                  
// </auto-generated>                                                         
//                                                                           
// This file contains SQM trace logging methods.

using EnvDTE;
using System;
using System.Globalization;
using Microsoft.VisualStudio;

namespace <#= NamespaceName #>
{
<#
    string facadeName = FeatureName + "SqmFacade";
#>
    /// <summary>
    /// Implementation of the facade to raise SQM commands.
    /// </summary>
    /// <remarks>Note that this facade only raises the commands via the DTE. There also needs to be
    /// code to handle the commands.
    /// </remarks>
    internal static partial class <#= facadeName #>
    {
        #region Fields
        private static readonly Guid CommandSetIdentifier = new Guid("{<#= CommandSetIdentifier #>}");
        private static IServiceProvider serviceProvider;
        private static DTE dte;
        #endregion

        /// <summary>
        /// Initialize the SQM facade.
        /// </summary>
        /// <remarks>This method can be called multiple times, but any calls after the first successful call will be no-ops.</remarks>
        public static void Initialize(IServiceProvider provider)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            
            serviceProvider = provider;

            DEBUG_SetSqmInitialized();

            if (dte == null)
            {
                dte = serviceProvider.GetService(typeof(DTE)) as DTE;
            }
        }

        /// <summary>
        /// Internal method to reset the facade to its uninitialized state.
        /// </summary>
        /// <remarks>This methods only exists for testing i.e. so unit tests can reset the facade
        /// to try out different test cases.</remarks>
        internal static void Reset()
        {
            DEBUG_Reset();
            dte = null;
        }

<#
    foreach(var sqmCmd in commands)
    {
        string commandName = sqmCmd.Item1;
        string commandId = sqmCmd.Item2;
#>
        /// <summary>
        /// SQM command for <#= commandName #>.
        /// </summary>
        public static void <#= commandName #>()
        {
            RunCommand(CommandSetIdentifier, (int)<#= enumName #>.<#= commandName #>CommandId);
            DEBUG_LogSqmCommandsToOutputWindow("<#= commandName #>");
        }

<#
    }
#>
        #region Private methods
        private static void RunCommand(Guid commandGroup, int commandId)
        {
            DEBUG_CheckSqmInitialized();

            object customIn = null;
            object customOut = null;

            try
            {
                if (dte != null)
                {
                    // We have to use the DTE way of raising the command to get Sqm data recording for free. 
                    // NOTE: Doing a Exec on the SUIHostCommandDispatcher is downlevel operation that will not
                    // perform any Sqm logging, which is not what we want.
                    dte.Commands.Raise(commandGroup.ToString("B").ToUpper(CultureInfo.InvariantCulture), commandId, ref customIn, ref customOut);
                }
            }
            catch (Exception ex)
            {
                if (ErrorHandler.IsCriticalException(ex))
                {
                    throw;
                }

                // We don't want to bubble any non-critical exceptions while logging SQM data

                // An error here probably means that a handler for the command has 
                // not been found - check that the handler code exists and is correctly registered.
                // NOTE: make sure you ran devenv /setup
                LogSqmException(ex);
                System.Diagnostics.Debug.Fail("Sqm logging failed: " + ex.ToString());
            }
        }

        /// <summary>
        /// Partial method called if an exception occurs when raising the SQM command.
        /// </summary>
        /// <remarks>This is an extension point to the text template to allow customized error processing.</remarks>
        static partial void LogSqmException(Exception ex);

        #endregion

        #region Debug-only methods

        private static bool initialized;

        [System.Diagnostics.Conditional("DEBUG")]
        private static void DEBUG_CheckSqmInitialized()
        {
            System.Diagnostics.Debug.Assert(initialized, "Attempting to use the <#= FeatureName #> SQM facade before it has been initialized.");
        }

        [System.Diagnostics.Conditional("DEBUG")]
        private static void DEBUG_SetSqmInitialized()
        {
            initialized = true;
        }

        [System.Diagnostics.Conditional("DEBUG")]
        private static void DEBUG_Reset()
        {
            initialized = false;
        }

        /// <summary>
        /// Log to output window to enable manual verification of the sequence of SQM commands that are fired.
        /// </summary>
        [System.Diagnostics.Conditional("DEBUG")]
        private static void DEBUG_LogSqmCommandsToOutputWindow(string command)
        {
            VsShellUtils.WriteToSonarLintOutputPane(serviceProvider, "[DEBUG SonarLintSqmFacade] {0}", command);
        }

        #endregion

    }
}